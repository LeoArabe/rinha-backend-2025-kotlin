package com.estagiario.gobots.rinha_backend.application.worker

import com.estagiario.gobots.rinha_backend.domain.PaymentEvent
import com.estagiario.gobots.rinha_backend.infrastructure.incoming.dto.PaymentRequest
import com.estagiario.gobots.rinha_backend.infrastructure.outgoing.repository.PaymentEventRepository
import com.estagiario.gobots.rinha_backend.infrastructure.outgoing.repository.PaymentRepository
import mu.KotlinLogging
import org.springframework.stereotype.Component
import org.springframework.transaction.annotation.Transactional

@Component
class TransactionalPersistenceWorker(
    private val paymentRepository: PaymentRepository,
    private val paymentEventRepository: PaymentEventRepository
) {
    private val logger = KotlinLogging.logger {}

    /**
     * Este m√©todo √© o cora√ß√£o da nossa estrat√©gia de persist√™ncia.
     * * A anota√ß√£o @Transactional aqui √© ativada corretamente porque este
     * m√©todo √© chamado a partir de um bean externo (o PaymentServiceImpl).
     * Isto garante que o Spring AOP crie um proxy transacional.
     *
     * As duas opera√ß√µes .save() dentro deste m√©todo s√£o executadas de forma at√≥mica:
     * ou ambas s√£o bem-sucedidas (commit), ou ambas s√£o desfeitas (rollback).
     */
    @Transactional
    suspend fun savePaymentAndEvent(request: PaymentRequest) {
        val payment = request.toDomainEntity()
        paymentRepository.save(payment)

        val paymentEvent = PaymentEvent.newProcessPaymentEvent(payment.correlationId)
        paymentEventRepository.save(paymentEvent)

        // Este log agora √© 100% fi√°vel. Se ele for impresso, a transa√ß√£o foi bem-sucedida.
        logger.info { "üéâ Transa√ß√£o para ${request.correlationId} commitada com sucesso!" }
    }
}